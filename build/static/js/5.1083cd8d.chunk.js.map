{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useFarmTransfer.ts","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/SendModal.tsx","views/Farms/components/FarmCard/SendAction.tsx","views/Farms/components/Send2Modal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","process","secondPart","Wrapper","styled","div","DetailsSection","LinkExternal","theme","colors","text","primary","bscScanAddress","bscScanAddress2","removed","totalValueFormated","lpLabel","TranslateString","addLiquidityUrl","useI18n","justifyContent","external","href","bold","Flex","CardHeading","Tag","farmImage","multiplier","isCommunityFarm","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","useTransfer","pid","dispatch","useDispatch","account","useWeb3React","busdContract","useHaoHaoContract","useBusdContract","onSend","useCallback","amount","a","transfer","txHash","fetchFarmUserDataAsync","console","info","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","onClick","mr","color","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","ModalActions","variant","disabled","alignSelf","WithdrawModal","SendModal","stakingTokenDecimals","fullBalance1","useTokenBalance","fullBalance2","TokenInput","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","onStake","useStake","onUnstake","useUnstake","useFarmTransfer","rawStakedBalance","getBalanceNumber","useModal","onPresentSend","onPresentDeposit","onPresentWithdraw","Send2Modal","Action","CardActions","farm","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","earnings","getAddress","lpName","toUpperCase","web3","isGreaterThan","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","error","textTransform","pr","SendAction","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","cakePrice","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","toLocaleLowerCase","homeValue","useBetAddrBalance","homeAddress","homeValue2","awayValue","awayAddress","total","totalFormated","Number","undefined","maximumFractionDigits","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","times","CAKE","ETH","replace","dual","earnLabel","apy","BigNumber","toNumber","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","CardActionsContainer","ExpandableSectionButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","HarvestAction","userData","earningsBigNumber","usePriceCakeBusd","earningsBusd","multipliedBy","onReward","useHarvest","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","requestedApproval","isApproved","handleApprove","UnlockButton","lg","StyledLinkExternal","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","bsc","name","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","Header","gradients","bubblegum","Farms","path","useRouteMatch","pathname","useLocation","farmsLP","useFarms","usePriceBnbBusd","query","CARD","viewMode","ethPriceUsd","usePriceEthBusd","sortOption","fastRefresh","useRefresh","stackedOnly","activeFarms","filter","inactiveFarms","stackedOnlyFarms","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","farmsToDisplayWithAPY","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","lowercaseQuery","isActive","farmsStaked","rowData","farms","orderBy","slice","sortFarms","as","size","Page","TABLE","length","sort","b","exact","renderContent","aria-label","role","defaultProps"],"mappings":"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","file":"static/js/5.1083cd8d.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\n\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  bscScanAddress2?: string,\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  bscScanAddress2,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Game')}:</Text>\n        <Text>{lpLabel}</Text>\n        {/* <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal> */}\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Bet')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View Home Bet')}\n        </Link>\n        <Link external href={bscScanAddress2} bold={false}>\n          {TranslateString(356, 'View Away Bet')}\n        </Link>\n      </Flex>\n      \n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`../../../../images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n         {\n         /* <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          </Flex> */\n          }\n\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { transfer } from 'utils/callHelpers'\r\nimport { useHaoHaoContract, useBusdContract } from './useContract'\r\n\r\nexport const useTransfer = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWeb3React()\r\n  const haohaoContract = useHaoHaoContract() // usdt \r\n  const busdContract = useBusdContract()\r\n\r\n  const handleSend = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await transfer(busdContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, busdContract, pid],\r\n  )\r\n\r\n  return { onSend: handleSend }\r\n}\r\n\r\nexport const useATransfer = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWeb3React()\r\n  const haohaoContract = useHaoHaoContract() // usdt \r\n  const busdContract = useBusdContract()\r\n\r\n    const handleSend = useCallback(\r\n      async (amount: string) => {\r\n        const txHash = await transfer(busdContract, pid, amount, account)\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n        console.info(txHash)\r\n      },\r\n      [account, dispatch, busdContract, pid],\r\n    )\r\n  \r\n    return { onSend: handleSend }\r\n  }\r\n\r\nexport default useTransfer","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from '../../../components/TokenInput'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\r\n\r\ninterface SendModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, decimals: number) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  stakingTokenDecimals?: number\r\n}\r\n\r\nconst SendModal: React.FC<SendModalProps> = ({\r\n  max,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  stakingTokenDecimals = 18,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, stakingTokenDecimals)\r\n  }, [max, stakingTokenDecimals])\r\n  \r\n  const fullBalance1 = useTokenBalance ('0xe9e7cea3dedca5984780bafc599bd69add087d56')\r\n  const fullBalance2 = getFullDisplayBalance(fullBalance1)\r\n \r\n\r\n\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance2)\r\n  }, [fullBalance2, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Bet Home Team')} `} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance2}\r\n        symbol='BUSD'\r\n      />\r\n      <ModalActions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx|| fullBalance2 === '0' || val === '0' ||  val > fullBalance2 }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val, stakingTokenDecimals)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SendModal","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useFarmTransfer from 'hooks/useFarmTransfer'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal' \r\nimport SendModal from '../SendModal'\r\n\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const { onSend } = useFarmTransfer(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  \r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n  const [onPresentSend] = useModal(\r\n    <SendModal max={stakedBalance} onConfirm={onSend} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentSend}>{TranslateString(999, 'Home Team')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentSend} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentSend}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from '../../../components/TokenInput'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\r\n\r\ninterface SendModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, decimals: number) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  stakingTokenDecimals?: number\r\n}\r\n\r\nconst SendModal: React.FC<SendModalProps> = ({\r\n  max,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  stakingTokenDecimals = 18,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, stakingTokenDecimals)\r\n  }, [max, stakingTokenDecimals])\r\n  \r\n  const fullBalance1 = useTokenBalance ('0xe9e7cea3dedca5984780bafc599bd69add087d56')\r\n  const fullBalance2 = getFullDisplayBalance(fullBalance1)\r\n\r\n\r\n\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance2)\r\n  }, [fullBalance2, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Bet Away Team')} `} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance2}\r\n        symbol='BUSD'\r\n      />\r\n      <ModalActions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx|| fullBalance2 === '0' || val === '0' || val > fullBalance2 }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val, stakingTokenDecimals)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SendModal\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useFarmTransfer from 'hooks/useFarmTransfer'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport Send2Modal from '../Send2Modal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const { onSend } = useFarmTransfer(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n  \r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n  const [onPresentSend] = useModal(\r\n    <Send2Modal max={stakedBalance} onConfirm={onSend} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentSend}>{TranslateString(999, 'Away Team')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport SendAction from './SendAction' \nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n  \n  \n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <SendAction \n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          SCC\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      {/*\n      <HarvestAction earnings={earnings} pid={pid} />\n      */}\n      <SendAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {/* {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()} */}\n      <StakeAction \n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid+1}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useBetAddrBalance } from 'hooks/useTokenBalance'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getFullDisplayBalance, getBalanceNumber } from 'utils/formatBalance'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, account}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n \r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n\r\n  const homeValue: BigNumber = useBetAddrBalance(farm.homeAddress, '0x55d398326f99059fF775485246999027B3197955')\r\n  const homeValue2 = getBalanceNumber(homeValue)\r\n  const awayValue: BigNumber = useBetAddrBalance(farm.awayAddress, '0x55d398326f99059fF775485246999027B3197955')\r\n  const awayValue2 = getBalanceNumber(awayValue)\r\n  const total = homeValue2+awayValue2\r\n  const totalFormated = total\r\n    ? `$${Number(total).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  \r\n  \r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n  \r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'SCC'\r\n\r\n  const farmAPY =\r\n    farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const { quoteTokenAdresses, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'SCC' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      \r\n      { /* {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex> */ }\r\n\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          // bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.homeAddress}`}\r\n          bscScanAddress2={`https://bscscan.com/address/${farm.awayAddress}`}\r\n          totalValueFormated={totalFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'SCC per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address, QuoteToken } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  quoteTokenAdresses: Address\n  quoteTokenSymbol: QuoteToken\n  tokenAddresses: Address\n  cakePrice: BigNumber\n  originalValue: BigNumber\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  quoteTokenAdresses,\n  tokenAddresses,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  return (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const displayBalance = earnings !== null && account ? earnings.toLocaleString() : '?'\n\n  return <Amount earned={earnings}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && 'Details'}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.tooltip.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.tooltip.text};\n  width: max-content;\n  display: none;\n  padding: 16px;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of token rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 token per block, a 40x farm would be getting 40 tokens per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceCakeBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>SCC</Title>\n        <Subtle>EARNED</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteTokenAdresses,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const { quoteTokenAdresses, tokenAddresses, tokenSymbol, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://bscscan.com/address/${lpAddress}`\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n  const isCommunityFarm = communityFarms.includes(tokenSymbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        <StakeContainer>\n          <StyledLinkExternal href={`https://dex.siacashcoin.com/#/add/${liquidityUrlPathParts}`}>\n            {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n          </StyledLinkExternal>\n        </StakeContainer>\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n}\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","\nimport React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { orderBy } from 'lodash'\n\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  // background: ${({ theme }) => theme.colors.gradients.bubblegum};\n\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.CARD)\n  const ethPriceUsd = usePriceEthBusd()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stackedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, 'apy', 'desc')\n      case 'multiplier':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.multiplier.slice(0, -1)), 'desc')\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay): FarmWithStakedValue[] => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        let liquidity = farm.lpTotalInQuoteToken\n\n        if (!farm.lpTotalInQuoteToken) {\n          liquidity = null\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          liquidity = bnbPrice.times(farm.lpTotalInQuoteToken)\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          liquidity = cakePrice.times(farm.lpTotalInQuoteToken)\n        }\n\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          liquidity = ethPriceUsd.times(farm.lpTotalInQuoteToken)\n        }\n\n        return { ...farm, apy, liquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\n            return true\n          }\n\n          return false\n        })\n      }\n      return farmsToDisplayWithAPY\n    },\n    [bnbPrice, farmsLP, query, cakePrice, ethPriceUsd],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const isActive = !pathname.includes('history')\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stackedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n\n  const rowData = farmsStaked.map((farm) => {\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value:\n          farm.apy &&\n          farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        quoteTokenAdresses,\n        quoteTokenSymbol,\n        tokenAddresses,\n        cakePrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                bnbPrice={bnbPrice}\n                cakePrice={cakePrice}\n                ethPrice={ethPriceUsd}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                bnbPrice={bnbPrice}\n                cakePrice={cakePrice}\n                ethPrice={ethPriceUsd}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {TranslateString(999, 'Sports')}\n        </Heading>\n        <Heading size=\"lg\" color=\"text\">\n          {TranslateString(999, 'Final odds refer to international markets')}\n        </Heading>\n      </Header>\n      <Page>\n      \n        {renderContent()}\n        {/* <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}